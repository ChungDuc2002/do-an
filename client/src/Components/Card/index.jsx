import React, { useEffect, useState } from 'react';
import { Card, Space, Tag, Button } from 'antd';
import {
  EyeOutlined,
  HeartFilled,
  HeartOutlined,
  MessageOutlined,
} from '@ant-design/icons';
import Meta from 'antd/es/card/Meta';
import StoreLocationIcon from './../Icons/StoreLocationIcon';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import axios from 'axios';
import { io } from 'socket.io-client';
import './style.scss';

const CardPage = ({ rooms }) => {
  const [userId, setUserId] = useState('');
  const [isFavorite, setIsFavorite] = useState(false);
  const [isSendingMessage, setIsSendingMessage] = useState(false);

  const auth = localStorage.getItem('authSon');
  const navigate = useNavigate();

  // Helper function ƒë·ªÉ l·∫•y th√¥ng tin tr·∫°ng th√°i ph√≤ng
  const getRoomStatusInfo = (status) => {
    switch (status) {
      case 'available':
        return {
          text: 'C√≤n tr·ªëng',
          color: 'green',
          canBook: true,
          description: 'Ph√≤ng s·∫µn s√†ng cho thu√™',
        };
      case 'rented':
        return {
          text: 'ƒê√£ ƒë∆∞·ª£c thu√™',
          color: 'red',
          canBook: false,
          description: 'Ph√≤ng ƒë√£ c√≥ ng∆∞·ªùi thu√™',
        };
      case 'maintenance':
        return {
          text: 'ƒêang b·∫£o tr√¨',
          color: 'orange',
          canBook: false,
          description: 'Ph√≤ng t·∫°m th·ªùi kh√¥ng th·ªÉ cho thu√™',
        };
      default:
        return {
          text: 'Kh√¥ng x√°c ƒë·ªãnh',
          color: 'gray',
          canBook: false,
          description: 'Tr·∫°ng th√°i kh√¥ng r√µ',
        };
    }
  };

  useEffect(() => {
    const getIdUser = async () => {
      const token = JSON.parse(localStorage.getItem('authSon'));
      if (token) {
        try {
          const result = await axios.get('http://localhost:5000/info', {
            headers: {
              token: `Bearer ${token}`,
            },
          });
          if (result.status === 200) {
            setUserId(result.data._id);
          }
        } catch (err) {
          console.log(err);
        }
      }
    };
    getIdUser();
  }, []);

  // Ki·ªÉm tra xem ph√≤ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o y√™u th√≠ch ch∆∞a
  useEffect(() => {
    const checkFavoriteStatus = async () => {
      if (userId && rooms._id) {
        try {
          const response = await axios.get(
            `http://localhost:5000/favorite/checkFavorite`,
            {
              params: {
                userId: userId,
                roomId: rooms._id,
              },
            }
          );
          setIsFavorite(response.data.isFavorite);
        } catch (err) {
          console.log('Error checking favorite status:', err);
          setIsFavorite(false);
        }
      }
    };
    checkFavoriteStatus();
  }, [userId, rooms._id]);

  const handleNavigateToRoom = () => {
    navigate(`/rooms/${rooms._id}`);
  };

  const handleToggleFavorite = async () => {
    if (auth) {
      try {
        const data = {
          userId,
          roomId: rooms._id,
        };

        if (isFavorite) {
          // N·∫øu ƒë√£ th√≠ch th√¨ x√≥a kh·ªèi y√™u th√≠ch
          await axios.delete(
            'http://localhost:5000/favorite/removeFromFavorite',
            {
              data: data,
            }
          );
          setIsFavorite(false);
          toast.success('ƒê√£ x√≥a kh·ªèi danh s√°ch y√™u th√≠ch !');
        } else {
          // N·∫øu ch∆∞a th√≠ch th√¨ th√™m v√†o y√™u th√≠ch
          await axios.post(
            'http://localhost:5000/favorite/addToFavorite',
            data
          );
          setIsFavorite(true);
          toast.success('Th√™m v√†o y√™u th√≠ch th√†nh c√¥ng !');
        }
      } catch (err) {
        if (isFavorite) {
          toast.error('Kh√¥ng th·ªÉ x√≥a kh·ªèi y√™u th√≠ch !');
        } else {
          toast.error('Ph√≤ng ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch !');
        }
      }
    } else {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ph√≤ng v√†o m·ª•c y√™u th√≠ch');
    }
  };

  // H√†m g·ª≠i th√¥ng tin ph√≤ng qua chat
  const handleConsultNow = async () => {
    if (!auth) {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng t∆∞ v·∫•n');
      navigate('/login');
      return;
    }

    setIsSendingMessage(true);
    try {
      const token = JSON.parse(localStorage.getItem('authSon'));

      // T·∫°o n·ªôi dung tin nh·∫Øn v·ªõi th√¥ng tin ph√≤ng
      const roomImageUrl = rooms.images[0]?.startsWith('http')
        ? rooms.images[0]
        : `http://localhost:5000${rooms.images[0]}`;

      const roomTypeText =
        rooms.type === 'nha-nguyen-can'
          ? 'Nh√† nguy√™n cƒÉn'
          : rooms.type === 'phong-tro'
          ? 'Ph√≤ng tr·ªç'
          : rooms.type === 'can-ho'
          ? 'CƒÉn h·ªô'
          : rooms.type;

      const messageContent = `üè† T∆Ø V·∫§N PH√íNG: ${rooms.title}

üìç ƒê·ªãa ch·ªâ: ${rooms.address.street}, ${rooms.address.ward}, ${
        rooms.address.district
      }, ${rooms.address.city}
üí∞ Gi√° thu√™: ${new Intl.NumberFormat().format(rooms.price)}ƒë/th√°ng  
üè¢ Lo·∫°i ph√≤ng: ${roomTypeText}
üìê Di·ªán t√≠ch: ${rooms.acreage}m¬≤
üîó Link chi ti·∫øt: ${window.location.origin}/rooms/${rooms._id}

Xin ch√†o! T√¥i mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ ph√≤ng n√†y. Xin h√£y cho t√¥i bi·∫øt th√™m th√¥ng tin chi ti·∫øt!`;

      // K·∫øt n·ªëi socket ƒë·ªÉ g·ª≠i tin nh·∫Øn
      const socket = io('http://localhost:5000', {
        auth: { token },
      });

      socket.on('connect', () => {
        console.log('Connected to send room consultation message');

        socket.emit('send_message', {
          content: messageContent,
          messageType: 'room_consultation',
          roomInfo: {
            roomId: rooms._id,
            roomTitle: rooms.title,
            roomPrice: rooms.price,
            roomType: roomTypeText,
            roomImage: roomImageUrl,
            roomAddress: `${rooms.address.street}, ${rooms.address.ward}, ${rooms.address.district}, ${rooms.address.city}`,
          },
        });

        toast.success(
          'ƒê√£ g·ª≠i y√™u c·∫ßu t∆∞ v·∫•n! Admin s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.'
        );
        socket.disconnect();
        setIsSendingMessage(false);
      });

      socket.on('connect_error', (error) => {
        console.error('Socket connection error:', error);
        toast.error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn t∆∞ v·∫•n');
        setIsSendingMessage(false);
      });
    } catch (error) {
      console.error('Error sending consultation message:', error);
      toast.error('C√≥ l·ªói khi g·ª≠i y√™u c·∫ßu t∆∞ v·∫•n');
      setIsSendingMessage(false);
    }
  };

  // ƒê·∫£m b·∫£o c√≥ status, m·∫∑c ƒë·ªãnh l√† 'available' n·∫øu kh√¥ng c√≥
  const roomStatus = rooms.status || 'available';
  const statusInfo = getRoomStatusInfo(roomStatus);

  const formatViews = (views) => {
    if (views >= 1000) {
      return `${(views / 1000).toFixed(1)}k`;
    }
    return views;
  };

  return (
    <Card
      hoverable={statusInfo.canBook}
      className={`room-card ${!statusInfo.canBook ? 'disabled' : ''}`}
      cover={
        <div className="card-cover">
          <img
            alt={rooms.title}
            src={
              rooms.images[0]?.startsWith('http')
                ? rooms.images[0]
                : `http://localhost:5000${rooms.images[0]}`
            }
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = 'https://placehold.co/600x400?text=No+Image';
            }}
          />
          <div className="views-badge">
            <EyeOutlined />
            <span>{formatViews(rooms.views)}</span>
          </div>
          <div className={`status-overlay status-${roomStatus}`}>
            <Tag color={statusInfo.color} className="status-tag">
              {statusInfo.text}
            </Tag>
          </div>
        </div>
      }
    >
      <Meta
        title={rooms.title}
        onClick={statusInfo.canBook ? handleNavigateToRoom : undefined}
        className={!statusInfo.canBook ? 'disabled-title' : ''}
      />

      {/* Ch·ªâ hi·ªÉn th·ªã icon y√™u th√≠ch khi ph√≤ng c√≤n tr·ªëng */}
      {statusInfo.canBook && auth && (
        <Space>
          <span className="icon">
            {isFavorite ? (
              <HeartFilled
                onClick={handleToggleFavorite}
                style={{ color: '#ff4d4f' }}
              />
            ) : (
              <HeartOutlined
                onClick={handleToggleFavorite}
                style={{ color: '#8c8c8c' }}
              />
            )}
          </span>
        </Space>
      )}

      <Space>
        <span className="price">
          Gi√° thu√™ : {new Intl.NumberFormat().format(rooms.price)}ƒë
        </span>
      </Space>

      <Space
        style={{
          display: 'flex',
        }}
      >
        <span className="type">
          {rooms.type === 'nha-nguyen-can'
            ? 'Nh√† nguy√™n cƒÉn'
            : rooms.type === 'phong-tro'
            ? 'Ph√≤ng tr·ªç'
            : rooms.type === 'can-ho'
            ? 'CƒÉn h·ªô'
            : rooms.type}
        </span>
        <span className="acreage">{rooms.acreage}m¬≤</span>
      </Space>

      <Space>
        <span className="address">
          <StoreLocationIcon />{' '}
          <span>
            {rooms.address.street} , {rooms.address.ward} ,{' '}
            {rooms.address.district} , {rooms.address.city}
          </span>
        </span>
      </Space>

      {/* Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i khi kh√¥ng th·ªÉ ƒë·∫∑t ph√≤ng */}
      {!statusInfo.canBook && (
        <div className="status-message">
          <span className={`message-text status-${roomStatus}`}>
            {statusInfo.description}
          </span>
        </div>
      )}

      {/* N√∫t ƒë·∫∑t c·ªçc ch·ªâ hi·ªÉn th·ªã khi ph√≤ng c√≤n tr·ªëng */}
      {statusInfo.canBook && auth && (
        <div className="booking-actions">
          <Button
            type="primary"
            onClick={() => navigate(`/payment/${rooms._id}`)}
            className="booking-button"
          >
            ƒê·∫∑t c·ªçc ph√≤ng
          </Button>
          <Button
            type="default"
            icon={<MessageOutlined />}
            onClick={handleConsultNow}
            loading={isSendingMessage}
            className="consult-button"
          >
            T∆∞ v·∫•n ngay
          </Button>
        </div>
      )}

      {/* Th√¥ng b√°o c·∫ßn ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p */}
      {statusInfo.canBook && !auth && (
        <div className="booking-actions">
          <Button
            type="default"
            onClick={() => navigate('/login')}
            className="login-button"
          >
            ƒêƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t ph√≤ng
          </Button>
          <Button
            type="default"
            icon={<MessageOutlined />}
            onClick={handleConsultNow}
            className="consult-button"
          >
            T∆∞ v·∫•n ngay
          </Button>
        </div>
      )}
    </Card>
  );
};

export default CardPage;
